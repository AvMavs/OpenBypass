<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>